package com.revature.daotests;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Commit;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.revature.dao.ShipDao;
import com.revature.dto.AddShipDTO;
import com.revature.model.Ship;

@ExtendWith(SpringExtension.class)
@ContextConfiguration("classpath:applicationContext.xml")
@WebAppConfiguration
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestPropertySource("classpath:springorm-test.properties")
@DirtiesContext(classMode = ClassMode.AFTER_CLASS)
public class ShipDaoTest {

	@Autowired
	private ShipDao shipDao;
	
	@Test
	@Transactional
	@Order(0)
	@Commit // By default, after every single test, the transaction will be rolled back
	// If we want to retain the data that was modified during that transaction, we need to have @Commit annotation to actually commit the changes
	void testAddShip_hasAutoGeneratedId() {
		AddShipDTO dto = new AddShipDTO();
		dto.setName("Black Pearl");
		dto.setAge(55);
		
		Ship ship = shipDao.addShip(dto);
		
		assertEquals(1, ship.getId());
	}
	
	@Test
	@Transactional
	@Order(1)
	void testGetShipById_success() {
		Ship actual = shipDao.getShipById(1);
		
		Ship expected = new Ship("Black Pearl", 55);
		expected.setId(1);
		
		assertEquals(expected, actual);
	}
	
	@Test
	@Transactional
	@Order(2)
	void testGetShipById_doesNotExist() {
		Ship actual = shipDao.getShipById(10000);
		
		Ship expected = null;
		
		assertEquals(expected, actual);
	}
	
}
